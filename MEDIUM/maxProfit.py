'''
‰Ω†Âè™ËÉΩÈÄâÊã© Êüê‰∏ÄÂ§© ‰π∞ÂÖ•ËøôÂè™ËÇ°Á•®ÔºåÂπ∂ÈÄâÊã©Âú® Êú™Êù•ÁöÑÊüê‰∏Ä‰∏™‰∏çÂêåÁöÑÊó•Â≠ê ÂçñÂá∫ËØ•ËÇ°Á•®„ÄÇÔºàÂè™ËÉΩË≤∑Ë≥£‰∏ÄÊ¨°Ôºâ

ËøîÂõû‰Ω†ÂèØ‰ª•‰ªéËøôÁ¨î‰∫§Êòì‰∏≠Ëé∑ÂèñÁöÑÊúÄÂ§ßÂà©Ê∂¶„ÄÇÂ¶ÇÊûú‰Ω†‰∏çËÉΩËé∑Âèñ‰ªª‰ΩïÂà©Ê∂¶ÔºåËøîÂõû 0
‰∏çÁî®dp ÊúÄÂ∞èÂÄºÊòØÊòØmin
'''
from typing import List


def maxProfit(prices):
    inf = int(1e9)
    minprice = float('inf')
    maxprofit = 0
    for price in prices:
        maxprofit = max(price - minprice, maxprofit)
        minprice = min(price, minprice)
    return maxprofit

'''
Â∞ΩÂèØËÉΩÂú∞ÂÆåÊàêÊõ¥Â§öÁöÑ‰∫§ÊòìÔºàÂèØÂ§öÊ¨°‰π∞Âçñ‰∏ÄÊîØËÇ°Á•®Ôºâ
no fee
Ê≥®ÊÑèÔºö‰Ω†‰∏çËÉΩÂêåÊó∂ÂèÇ‰∏éÂ§öÁ¨î‰∫§ÊòìÔºà‰Ω†ÂøÖÈ°ªÂú®ÂÜçÊ¨°Ë¥≠‰π∞ÂâçÂá∫ÂîÆÊéâ‰πãÂâçÁöÑËÇ°Á•®Ôºâ„ÄÇ
'''
# ÂçñÂá∫ÊúâÂà©ÂèØÂõæ
def maxrofit2(stocks):
        if not stocks: return 0
        ans = 0
        for i in range(1, len(stocks)):
            if (stocks[i] > stocks[i-1]):
                ans += (stocks[i] - stocks[i-1])
        return ans

'''
Âú®ÊØè‰∏ÄÂ§©Ôºå‰Ω†ÂèØ‰ª•ÂÜ≥ÂÆöÊòØÂê¶Ë¥≠‰π∞Âíå/ÊàñÂá∫ÂîÆËÇ°Á•®„ÄÇ‰Ω†Âú®‰ªª‰ΩïÊó∂ÂÄô ÊúÄÂ§ö Âè™ËÉΩÊåÅÊúâ ‰∏ÄËÇ° ËÇ°Á•®„ÄÇ‰Ω†‰πüÂèØ‰ª•ÂÖàË¥≠‰π∞ÔºåÁÑ∂ÂêéÂú® Âêå‰∏ÄÂ§© Âá∫ÂîÆ„ÄÇ

ËøîÂõû ‰Ω†ËÉΩËé∑ÂæóÁöÑ ÊúÄÂ§ß Âà©Ê∂¶ „ÄÇ
Áî±‰∫éÂÖ®ÈÉ®‰∫§ÊòìÁªìÊùüÂêéÔºåÊåÅÊúâËÇ°Á•®ÁöÑÊî∂Áõä‰∏ÄÂÆö‰Ωé‰∫é‰∏çÊåÅÊúâËÇ°Á•®ÁöÑÊî∂ÁõäÔºåÂõ†Ê≠§ËøôÊó∂ÂÄô dp[n‚àí1][0] Êî∂ÁõäÂøÖÁÑ∂ÊòØÂ§ß‰∫é dp[n‚àí1][1] ÊúÄÂêéÁöÑÁ≠îÊ°àÂç≥‰∏∫ dp[n‚àí1][0]


'''
def maxProfit_k_inf(prices: List[int]) -> int:
    n = len(prices)
    dp_i_0, dp_i_1 = 0, float('-inf')
    for i in range(n):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])
        dp_i_1 = max(dp_i_1, temp - prices[i])
    return dp_i_0


'''
ÊâãÁ∫åË≤ª
'''
def maxProfit_with_fee(prices: List[int], fee: int) -> int:
    n = len(prices)
    dp_i_0, dp_i_1 = 0, float('-inf')
    for i in range(n):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])
        dp_i_1 = max(dp_i_1, temp - prices[i] - fee)
    return dp_i_0

'''
ÊâãÁ∫åË≤ªÊªæÂãïÊï∏ÁµÑ
sellË°®Á§∫Á¨¨iÂ§©‰∫§ÊòìÂÆåÂêéÊâãÈáåÊ≤°ÊúâËÇ°Á•®ÁöÑÊúÄÂ§ßÂà©Ê∂¶
buy Ë°®Á§∫Á¨¨iÂ§©‰∫§ÊòìÂÆåÂêéÊâãÈáåÊåÅÊúâ‰∏ÄÊîØËÇ°Á•®ÁöÑÊúÄÂ§ßÂà©Ê∂¶Ôºài ‰ªé 0 ÂºÄÂßãÔºâ„ÄÇ

'''
# class Solution:
#     def maxProfit3(self, prices, fee: int) -> int:
#         n = len(prices)
#         sell, buy = 0, -prices[0]
#         for i in range(1, n):
#             sell, buy = max(sell, buy + prices[i] - fee), max(buy, sell - prices[i])
#         return sell

'''
ÊâãÁ∫åË≤ªË≤™ÂøÉ
ÊñπÊ≥ï‰∏Ä‰∏≠ÔºåÊàë‰ª¨Â∞ÜÊâãÁª≠Ë¥πÊîæÂú®ÂçñÂá∫Êó∂ËøõË°åËÆ°ÁÆó„ÄÇÂ¶ÇÊûúÊàë‰ª¨Êç¢‰∏Ä‰∏™ËßíÂ∫¶ËÄÉËôëÔºåÂ∞ÜÊâãÁª≠Ë¥πÊîæÂú®‰π∞ÂÖ•Êó∂ËøõË°åËÆ°ÁÆóÔºåÈÇ£‰πàÂ∞±ÂèØ‰ª•ÂæóÂà∞‰∏ÄÁßçÂü∫‰∫éË¥™ÂøÉÁöÑÊñπÊ≥ï„ÄÇ
Êàë‰ª¨Áî® buy Ë°®Á§∫Âú®ÊúÄÂ§ßÂåñÊî∂ÁõäÁöÑÂâçÊèê‰∏ãÔºåÂ¶ÇÊûúÊàë‰ª¨Êâã‰∏äÊã•Êúâ‰∏ÄÊîØËÇ°Á•®ÔºåÈÇ£‰πàÂÆÉÁöÑÊúÄ‰Ωé‰π∞ÂÖ•‰ª∑Ê†ºÊòØÂ§öÂ∞ë„ÄÇÂú®ÂàùÂßãÊó∂Ôºåbuy ÁöÑÂÄº‰∏∫ prices[0] Âä†‰∏äÊâãÁª≠Ë¥π fee„ÄÇÈÇ£‰πàÂΩìÊàë‰ª¨ÈÅçÂéÜÂà∞Á¨¨ i~(i>0) Â§©Êó∂Ôºö
Â¶ÇÊûúÂΩìÂâçÁöÑËÇ°Á•®‰ª∑Ê†º prices[i] Âä†‰∏äÊâãÁª≠Ë¥π fee Â∞è‰∫é buyÔºåÈÇ£‰πà‰∏éÂÖ∂‰ΩøÁî® buy ÁöÑ‰ª∑Ê†ºË¥≠‰π∞ËÇ°Á•®ÔºåÊàë‰ª¨‰∏çÂ¶Ç‰ª•prices[i]+fee ÁöÑ‰ª∑Ê†ºË¥≠‰π∞ËÇ°Á•®ÔºåÂõ†Ê≠§Êàë‰ª¨Â∞Ü buy Êõ¥Êñ∞‰∏∫ prices[i]+fee
Â¶ÇÊûúÂΩìÂâçÁöÑËÇ°Á•®‰ª∑Ê†º prices[i] Â§ß‰∫é buyÔºåÈÇ£‰πàÊàë‰ª¨Áõ¥Êé•ÂçñÂá∫ËÇ°Á•®Âπ∂‰∏îËé∑Âæó prices[i]‚àíbuy ÁöÑÊî∂Áõä„ÄÇ
‰ΩÜÂÆûÈôÖ‰∏äÔºåÊàë‰ª¨Ê≠§Êó∂ÂçñÂá∫ËÇ°Á•®ÂèØËÉΩÂπ∂‰∏çÊòØÂÖ®Â±ÄÊúÄ‰ºòÁöÑÔºà‰æãÂ¶Ç‰∏ã‰∏ÄÂ§©ËÇ°Á•®‰ª∑Ê†ºÁªßÁª≠‰∏äÂçáÔºâÔºåÂõ†Ê≠§Êàë‰ª¨ÂèØ‰ª•Êèê‰æõ‰∏Ä‰∏™ÂèçÊÇîÊìç‰ΩúÔºåÁúãÊàêÂΩìÂâçÊâã‰∏äÊã•Êúâ‰∏ÄÊîØ‰π∞ÂÖ•‰ª∑Ê†º‰∏∫ prices[i] ÁöÑËÇ°Á•®ÔºåÂ∞Ü buy Êõ¥Êñ∞‰∏∫ prices[i]„ÄÇ
ËøôÊ†∑‰∏ÄÊù•ÔºåÂ¶ÇÊûú‰∏ã‰∏ÄÂ§©ËÇ°Á•®‰ª∑Ê†ºÁªßÁª≠‰∏äÂçáÔºåÊàë‰ª¨‰ºöËé∑Âæó prices[i+1]‚àíprices[i] ÁöÑÊî∂ÁõäÔºåÂä†‰∏äËøô‰∏ÄÂ§©prices[i]‚àíbuy ÁöÑÊî∂ÁõäÔºåÊÅ∞Â•ΩÂ∞±Á≠â‰∫éÂú®Ëøô‰∏ÄÂ§©‰∏çËøõË°å‰ªª‰ΩïÊìç‰ΩúÔºåËÄåÂú®‰∏ã‰∏ÄÂ§©ÂçñÂá∫ËÇ°Á•®ÁöÑÊî∂ÁõäÔºõ
ÂØπ‰∫éÂÖ∂‰ΩôÁöÑÊÉÖÂÜµÔºåprices[i] ËêΩÂú®Âå∫Èó¥ [buy‚àífee,buy] ÂÜÖÔºåÂÆÉÁöÑ‰ª∑Ê†ºÊ≤°Êúâ‰ΩéÂà∞Êàë‰ª¨ÊîæÂºÉÊâã‰∏äÁöÑËÇ°Á•®ÂéªÈÄâÊã©ÂÆÉÔºå‰πüÊ≤°ÊúâÈ´òÂà∞Êàë‰ª¨ÂèØ‰ª•ÈÄöËøáÂçñÂá∫Ëé∑ÂæóÊî∂ÁõäÔºåÂõ†Ê≠§Êàë‰ª¨‰∏çËøõË°å‰ªª‰ΩïÊìç‰Ωú„ÄÇ
‰∏äÈù¢ÁöÑË¥™ÂøÉÊÄùÊÉ≥ÂèØ‰ª•ÊµìÁº©Êàê‰∏ÄÂè•ËØùÔºåÂç≥ÂΩìÊàë‰ª¨ÂçñÂá∫‰∏ÄÊîØËÇ°Á•®Êó∂ÔºåÊàë‰ª¨Â∞±Á´ãÂç≥Ëé∑Âæó‰∫Ü‰ª•Áõ∏Âêå‰ª∑Ê†ºÂπ∂‰∏îÂÖçÈô§ÊâãÁª≠Ë¥π‰π∞ÂÖ•‰∏ÄÊîØËÇ°Á•®ÁöÑÊùÉÂà©„ÄÇÂú®ÈÅçÂéÜÂÆåÊï¥‰∏™Êï∞ÁªÑ prices ‰πãÂêé‰πãÂêéÔºåÊàë‰ª¨Â∞±ÂæóÂà∞‰∫ÜÊúÄÂ§ßÁöÑÊÄªÊî∂Áõä„ÄÇ

'''
# class Solution:
#     def maxProfit3(self, prices, fee: int) -> int:
#         n = len(prices)
#         buy = prices[0] + fee
#         profit = 0
#         for i in range(1, n):
#             if prices[i] + fee < buy:
#                 buy = prices[i] + fee
#             elif prices[i] > buy:
#                 profit += prices[i] - buy
#                 buy = prices[i]
#         return profit

'''
ÂÜ∑ÂÜªÊúü
ÂÜ∑ÂÜªÊúü‰∏∫ 1 Â§©
dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
Ëß£ÈáäÔºöÁ¨¨ i Â§©ÈÄâÊã© buy ÁöÑÊó∂ÂÄôÔºåË¶Å‰ªé i-2 ÁöÑÁä∂ÊÄÅËΩ¨ÁßªÔºåËÄå‰∏çÊòØ i-1 „ÄÇ
'''

def maxProfit_with_cool(prices: List[int]) -> int:
    n = len(prices)
    dp_i_0, dp_i_1, dp_pre_0 = 0, float('-inf'), 0
    for i in range(n):
        temp = dp_i_0
        dp_i_0 = max(dp_i_0, dp_i_1 + prices[i])
        dp_i_1 = max(dp_i_1, dp_pre_0 - prices[i])
        dp_pre_0 = temp
    return dp_i_0




# k Êó†ÈôêÂà∂ÔºåÂåÖÂê´ÊâãÁª≠Ë¥πÂíåÂÜ∑ÂÜªÊúü
def maxProfit_k_inf_fee_cooldown(prices: List[int], cooldown: int, fee: int) -> int:
    n = len(prices)
    dp = [[0] * 2 for _ in range(n)]
    for i in range(n):
        if i - 1 == -1:
            # base case 1
            dp[i][0] = 0
            dp[i][1] = -prices[i] - fee
            continue

        # ÂåÖÂê´ cooldown ÁöÑ base case
        if i - cooldown - 1 < 0:
            # base case 2
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
            # Âà´Âøò‰∫ÜÂáè fee
            dp[i][1] = max(dp[i - 1][1], -prices[i] - fee)
            continue
        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])
        # ÂêåÊó∂ËÄÉËôë cooldown Âíå fee
        dp[i][1] = max(dp[i - 1][1], dp[i - cooldown - 1][0] - prices[i] - fee)
    return dp[n - 1][0]





'''

Áî±‰∫éÊàë‰ª¨ÊúÄÂ§öÂèØ‰ª•ÂÆåÊàê2Á¨î‰∫§ÊòìÔºåÂõ†Ê≠§Âú®‰ªªÊÑè‰∏ÄÂ§©ÁªìÊùü‰πãÂêéÔºåÊàë‰ª¨‰ºöÂ§Ñ‰∫é‰ª•‰∏ã‰∫î‰∏™Áä∂ÊÄÅ‰∏≠ÁöÑ‰∏ÄÁßçÔºö

Êú™ËøõË°åËøá‰ªª‰ΩïÊìç‰ΩúÔºõ

Âè™ËøõË°åËøá‰∏ÄÊ¨°‰π∞Êìç‰ΩúÔºõ

ËøõË°å‰∫Ü‰∏ÄÊ¨°‰π∞Êìç‰ΩúÂíå‰∏ÄÊ¨°ÂçñÊìç‰ΩúÔºåÂç≥ÂÆåÊàê‰∫Ü‰∏ÄÁ¨î‰∫§ÊòìÔºõ

Âú®ÂÆåÊàê‰∫Ü‰∏ÄÁ¨î‰∫§ÊòìÁöÑÂâçÊèê‰∏ãÔºåËøõË°å‰∫ÜÁ¨¨‰∫åÊ¨°‰π∞Êìç‰ΩúÔºõ

ÂÆåÊàê‰∫ÜÂÖ®ÈÉ®‰∏§Á¨î‰∫§Êòì„ÄÇ

'''

# class Solution:
#     def maxProfit5(self, prices) -> int:
#         n = len(prices)
#         buy1 = buy2 = -prices[0]
#         sell1 = sell2 = 0
#         for i in range(1, n):
#             buy1 = max(buy1, -prices[i])
#             sell1 = max(sell1, buy1 + prices[i])
#             buy2 = max(buy2, sell1 - prices[i])
#             sell2 = max(sell2, buy2 + prices[i])
#         return sell2

'''
‰Ω†ÊúÄÂ§öÂèØ‰ª•ÂÆåÊàê k Á¨î‰∫§Êòì„ÄÇ
Ê≥®ÊÑèÔºö‰Ω†‰∏çËÉΩÂêåÊó∂ÂèÇ‰∏éÂ§öÁ¨î‰∫§ÊòìÔºà‰Ω†ÂøÖÈ°ªÂú®ÂÜçÊ¨°Ë¥≠‰π∞ÂâçÂá∫ÂîÆÊéâ‰πãÂâçÁöÑËÇ°Á•®Ôºâ„ÄÇ
'''


# Ê≥®ÊÑèÔºöpython ‰ª£Á†ÅÁî± chatGPTü§ñ Ê†πÊçÆÊàëÁöÑ java ‰ª£Á†ÅÁøªËØëÔºåÊó®Âú®Â∏ÆÂä©‰∏çÂêåËÉåÊôØÁöÑËØªËÄÖÁêÜËß£ÁÆóÊ≥ïÈÄªËæë„ÄÇ
# Êú¨‰ª£Á†Å‰∏ç‰øùËØÅÊ≠£Á°ÆÊÄßÔºå‰ªÖ‰æõÂèÇËÄÉ„ÄÇÂ¶ÇÊúâÁñëÊÉëÔºåÂèØ‰ª•ÂèÇÁÖßÊàëÂÜôÁöÑ java ‰ª£Á†ÅÂØπÊØîÊü•Áúã„ÄÇ

# ÂéüÂßãÁâàÊú¨
def maxProfit_k_2(prices: List[int]) -> int:
    max_k = 2
    n = len(prices)
    dp = [[[0] * 2 for _ in range(max_k + 1)] for _ in range(n)]
    for i in range(n):
        for k in range(max_k, 0, -1):
            if i - 1 == -1:
                # Â§ÑÁêÜ base case
                dp[i][k][0] = 0
                dp[i][k][1] = -prices[i]
                continue
            dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
            dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])
    # Á©∑‰∏æ‰∫Ü n √ó max_k √ó 2 ‰∏™Áä∂ÊÄÅÔºåÊ≠£Á°Æ„ÄÇ
    return dp[n - 1][max_k][0]


# def maxProfit(self, k: int, prices) -> int:
#     if not prices:
#         return 0
#
#     n = len(prices)
#     k = min(k, n // 2)
#     buy = [0] * (k + 1)
#     sell = [0] * (k + 1)
#
#     buy[0], sell[0] = -prices[0], 0
#     for i in range(1, k + 1):
#         buy[i] = sell[i] = float("-inf")
#
#     for i in range(1, n):
#         buy[0] = max(buy[0], sell[0] - prices[i])
#         for j in range(1, k + 1):
#             buy[j] = max(buy[j], sell[j] - prices[i])
#             sell[j] = max(sell[j], buy[j - 1] + prices[i])
#
#     return max(sell)



print(maxProfit_k_inf([3,5,1,4,8]))